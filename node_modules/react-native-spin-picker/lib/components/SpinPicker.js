import React from 'react';
import { FlatList, Platform, TouchableOpacity, View } from 'react-native';
import { NOOP } from '../util/Functions';
import { Mask } from './Mask';
import { ArrowButton } from './ArrowButton';
import { FloatingInput } from './FloatingInput';
export class SpinPicker extends React.Component {
    constructor(props) {
        super(props);
        this.isDragScrolling = false;
        this.isMomentumScrolling = false;
        this.isForceScrolling = false;
        this.autoScrollTimer = 0;
        this.manualScrollTimer = 0;
        this.data = [];
        this.showLength = 3;
        this.scrollThreshold = 5;
        this.scrollInterval = 50;
        this.onListItemLayout = (event) => {
            const { height } = event.nativeEvent.layout;
            if (this.state.height != height) {
                if (this.state.height != 0) {
                    console.warn("Dynamic heights are not supported, if you are experiencing issues set a fixed height in renderItem");
                }
                this.setState({ height: height });
            }
        };
        this.getRenderItem = info => {
            return (<TouchableOpacity onLayout={this.onListItemLayout} onPress={() => this.onListItemClick(info)}>
                {this.props.renderItem(info.item.item, info.index)}
            </TouchableOpacity>);
        };
        this.onInputValueChanged = (value) => {
            const { onInputValueChanged } = this.props;
            if (onInputValueChanged) {
                const inputValue = onInputValueChanged(value, this.state.inputValue);
                this.setState({ inputValue });
            }
        };
        this.onStartIncrementScroll = () => this.manualScrollTimer = setInterval(this.onIncrementIndex, this.scrollInterval);
        this.onStartDecrementScroll = () => this.manualScrollTimer = setInterval(this.onDecrementIndex, this.scrollInterval);
        this.onEndScroll = () => clearInterval(this.manualScrollTimer);
        this.onIncrementIndex = () => this.scrollToIndex(this.state.selectedIndex + 1);
        this.onDecrementIndex = () => this.scrollToIndex(this.state.selectedIndex - 1);
        this.onScroll = (event) => {
            const { y } = event.nativeEvent.contentOffset;
            if (y < this.scrollThreshold) {
                this.listRef.scrollToOffset({ offset: this.dataLength * this.state.height + y });
            }
            else if (y > ((this.dataLength * 2 - this.showLength) * this.state.height) - this.scrollThreshold) {
                this.listRef.scrollToOffset({ offset: (this.dataLength - this.showLength) * this.state.height });
            }
        };
        this.scrollToNearestElement = (verticalOffset) => {
            let { height } = this.state;
            let selectedIndex = Math.round(verticalOffset / height);
            let newOffset = selectedIndex * height;
            if (Platform.OS === 'ios') {
                this.isForceScrolling = true;
            }
            this.onIndexChanged(selectedIndex);
            this.listRef.scrollToOffset({ offset: newOffset });
        };
        this.onDragScrollBegin = () => {
            this.isDragScrolling = true;
            if (Platform.OS === 'ios') {
                this.isForceScrolling = false;
            }
            this.autoScrollTimer && clearTimeout(this.autoScrollTimer);
        };
        this.onDragScrollEnd = (event) => {
            event.persist();
            this.isDragScrolling = false;
            this.autoScrollTimer && clearTimeout(this.autoScrollTimer);
            this.autoScrollTimer = setTimeout(() => {
                if (!this.isMomentumScrolling && !this.isDragScrolling) {
                    this.scrollToNearestElement(event.nativeEvent.contentOffset.y);
                }
            }, 10);
        };
        this.onMomentumScrollBegin = () => {
            this.isMomentumScrolling = true;
            this.autoScrollTimer && clearTimeout(this.autoScrollTimer);
        };
        this.onMomentumScrollEnd = (event) => {
            this.isMomentumScrolling = false;
            if (!this.isForceScrolling && !this.isMomentumScrolling && !this.isDragScrolling) {
                this.scrollToNearestElement(event.nativeEvent.contentOffset.y);
            }
        };
        this.dataLength = props.data.length;
        this.mapData();
        this.state = {
            height: 0,
            selectedIndex: this.findElementIndex(props.value),
            isTyping: false,
            inputValue: ''
        };
    }
    componentDidUpdate(prevProps) {
        this.mapData();
        const { value, keyExtractor } = this.props;
        if (keyExtractor(value) !== keyExtractor(prevProps.value)) {
            this.scrollToIndex(this.findElementIndex(value));
        }
    }
    findElementIndex(element) {
        const { keyExtractor } = this.props;
        for (let i = 0; i < this.data.length; i++) {
            if (keyExtractor(this.data[i].item) === keyExtractor(element)) {
                if (i == 0) {
                    return this.dataLength - 1;
                }
                return i - 1;
            }
        }
        return -1;
    }
    mapData() {
        this.data = this.props.data.map(item => ({
            index: '1-' + this.props.keyExtractor(item),
            item: item
        }));
        this.data.push(...this.props.data.map(item => ({
            index: '2-' + this.props.keyExtractor(item),
            item: item
        })));
    }
    render() {
        const { height, showArrows, selectedIndex, isTyping, textInputProps, textInputStyle } = Object.assign(Object.assign({}, this.state), this.props);
        const list = (<View style={{ height: height * this.showLength }}>

                <FlatList data={this.data} renderItem={this.getRenderItem} ref={ref => this.listRef = ref} showsVerticalScrollIndicator={false} onScrollToIndexFailed={NOOP} onScroll={this.onScroll} initialScrollIndex={selectedIndex} getItemLayout={(data, index) => ({ length: height, offset: height * index, index })} keyExtractor={(item) => item.index} onMomentumScrollBegin={this.onMomentumScrollBegin} onMomentumScrollEnd={this.onMomentumScrollEnd} onScrollBeginDrag={this.onDragScrollBegin} onScrollEndDrag={this.onDragScrollEnd} style={{ flexGrow: 0 }}/>

                <FloatingInput height={height} visible={isTyping} style={textInputStyle} onSubmitEditing={() => this.setState({ isTyping: false })} value={this.state.inputValue} onChangeText={this.onInputValueChanged} {...textInputProps}/>

                <Mask height={height} isTop/>
                <Mask height={height}/>

            </View>);
        if (showArrows) {
            return (<View>
                    <ArrowButton height={height} onPress={this.onDecrementIndex} onLongPress={this.onStartDecrementScroll} onLift={this.onEndScroll} {...this.props}/>
                    {list}
                    <ArrowButton isPointingDown height={height} onPress={this.onIncrementIndex} onLongPress={this.onStartIncrementScroll} onLift={this.onEndScroll} {...this.props}/>
                </View>);
        }
        return list;
    }
    onListItemClick(info) {
        if (this.props.onInputValueChanged && info.index === this.state.selectedIndex + 1) {
            this.setState({ isTyping: true });
        }
    }
    onIndexChanged(selectedIndex) {
        this.setState({ selectedIndex });
        this.props.onValueChange(this.data[selectedIndex + 1].item);
    }
    scrollToIndex(selectedIndex) {
        if (selectedIndex < 0)
            return;
        let { height, isTyping } = this.state;
        // Scroll to equivalent on duplicated list without animation before continuing
        if (selectedIndex < 1) {
            const offset = (this.dataLength + 1) * height;
            this.listRef.scrollToOffset({ offset, animated: false });
            selectedIndex = this.dataLength;
        }
        else if (selectedIndex === this.dataLength * 2 - (this.showLength - 1)) {
            const offset = (this.dataLength - this.showLength) * height;
            this.listRef.scrollToOffset({ offset, animated: false });
            selectedIndex = this.dataLength - this.showLength + 1;
        }
        const offset = selectedIndex * height;
        this.onIndexChanged(selectedIndex);
        this.listRef.scrollToOffset({ offset, animated: !isTyping });
    }
}
//# sourceMappingURL=data:application/json;base64,